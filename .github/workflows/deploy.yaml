name: "Test & deploy Cloud Run Service to dev environment"

on:
  push:
    branches:
      - "main"

env:
  PROJECT_ID: "${{ vars.PROJECT_ID }}"
  SERVICE_ACCOUNT: "${{ vars.SERVICE_ACCOUNT}}"
  WORKLOAD_IDENTITY_PROVIDER: "${{ vars.WORKLOAD_IDENTITY_PROVIDER}}"
  JOB_NAME: "ai-governance"
  REGION: "${{ vars.REGION}}"
  TASK_TIMEOUT: "1h"

jobs:
  tests:
      runs-on: "ubuntu-latest"
      strategy:
        max-parallel: 4
        matrix:
          python-version: ["3.10" ]
      steps:
        - uses: "actions/checkout@v3"
        - name: "Set up Python ${{ matrix.python-version }}"
          uses: "actions/setup-python@v3"
          with:
            python-version: "${{ matrix.python-version }}"
        - name: "Install dependencies"
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
        - name: "Run tests"
          run: |
            pip install pytest pytest-cov
            mkdir -p junit
            PYTHONPATH=. pytest tests/ --doctest-modules --junitxml=junit/test-results.xml --cov=ai_governance --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=80
        - name: "Upload coverage reports"
          uses: codecov/codecov-action@v4
          if: always()  # Upload coverage even if tests fail
          with:
            name: coverage-${{ matrix.python-version }}-${{ github.run_id }}
            file: ./coverage.xml  
            flags: unittests
            fail_ci_if_error: false
        - name: "Archive test results"
          uses: actions/upload-artifact@v4
          if: always()  # Always upload test results
          with:
            name: test-results
            path: |
              junit/
              htmlcov/
              coverage.xml
  deploy:
    runs-on: "ubuntu-latest"
    needs: "tests"
    timeout-minutes: 10
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: "actions/checkout@v3"
      - name: "test env"
        run: "env"
      - id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          workload_identity_provider: "${{env.WORKLOAD_IDENTITY_PROVIDER}}"
          service_account: "${{env.SERVICE_ACCOUNT}}"
      - name: "Setup GCP client"
        uses: "google-github-actions/setup-gcloud@v0"
        with:
          project_id: "${{ env.PROJECT_ID }}"
      - name: "Authorize Docker push"
        run: "gcloud auth configure-docker"
      - name: "Build and Push Container"
        run: |-
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.JOB_NAME }}:${{  github.sha }} .
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.JOB_NAME }}:${{  github.sha }}
      - name: "Get image digest"
        id: image_digest
        run: |
          DIGEST=$(gcloud container images describe gcr.io/${{ env.PROJECT_ID }}/${{ env.JOB_NAME }}:${{ github.sha }} --format='get(image_summary.digest)')
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
      - name: "Set up Terraform"
        uses: "hashicorp/setup-terraform@v3"

      - name: "Set up Google Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
